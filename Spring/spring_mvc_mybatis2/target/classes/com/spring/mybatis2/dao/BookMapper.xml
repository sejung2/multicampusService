<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- myBatis에서는 현재 xml 문서가 Mapper의 역할을 한다는 정의와
	Mapper 태그의 문법을 정의하기위한 DTD 정보를 요구함
	Mapper 문서에서는 반드시 Mapper를 표현하는 dtd 정보를 표현해야 함 -->

<!-- 아래 mapper에서 구현되는 기능은  IProductDAO 추상메소드로 한정 됨-->
<mapper namespace="com.spring.mybatis2.dao.IBookDAO">
    <!-- 전체 상품 조회 : select -->
    <!-- 태그 관련 속성 : id= 태그 고유 식별자(id가 추상메소드 명과 동일해야 함)
                          parameterType=쿼리에 전달할 파라미터 객체의 타입을 지정
                          resultType=반환결과가 필요한 경우 자바 객체의 타입 지정
                          resultMap=결과를 매핑하기위한 외부 결과 맵 참조(개발자가 구성해야 함)
                          statemenType= stmt 객체 유형 지정(기본값 prepared)
     -->
    <!-- resultMap 구성 : 반환되는 rs의 컬럼과 저장해야하는 vo 클래스의 필드명을 매핑하는 역할 -->
    <resultMap id="bookResult" type="com.spring.mybatis2.model.BookVO">
        <result property="bookNo" column="bookNo"/>
        <result property="bookName" column="bookName"/>
        <result property="bookAuthor" column="bookAuthor"/>
        <result property="bookPrice" column="bookPrice"/>
        <result property="bookDate" column="bookDate"/>
        <result property="bookStock" column="bookStock"/>
        <result property="pubNo" column="pubNo"/>
    </resultMap>

    <select id="listAllBook" resultMap="bookResult">
        SELECT * FROM book2 ORDER BY bookNo
    </select>

    <!-- 도서 등록 -->
    <insert id="insertBook" parameterType="com.spring.mybatis2.model.BookVO">
        INSERT INTO book2(bookNo, bookName, bookAuthor, bookPrice, bookDate, bookStock, pubNo)
        VALUES (#{bookNo}, #{bookName}, #{bookAuthor}, #{bookPrice}, #{bookDate}, #{bookStock}, #{pubNo})
    </insert>

    <!-- 도서 상세정보 조회 -->
    <select id="detailViewBook" parameterType="String" resultType="com.spring.mybatis2.model.BookVO">
        SELECT * FROM book2 WHERE bookNo=#{bookNo}
    </select>

    <!-- 도서 정보 수정 -->
    <update id="updateBook" parameterType="com.spring.mybatis2.model.BookVO">
        UPDATE book2
        SET bookNo=#{bookNo}, bookName=#{bookName}, bookAuthor=#{bookAuthor}, bookPrice=#{bookPrice},
            bookDate=#{bookDate}, bookStock=#{bookStock}, pubNo=#{pubNo}
        WHERE bookNo=#{bookNo}
    </update>

    <!-- 도서 정보 삭제 -->
    <delete id="deleteBook" parameterType="String">
        DELETE FROM book2 WHERE bookNo=#{bookNo}
    </delete>
</mapper>