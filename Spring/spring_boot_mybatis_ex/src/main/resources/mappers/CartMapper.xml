<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.mybatis.project.dao.ICartDAO">
    <!-- 장바구니에 존재하는지 확인 -->
    <select id="checkPrdInCart" parameterType="hashmap" resultType="int">
        SELECT COUNT(*) FROM cart WHERE memId=#{memId} AND prdNo=#{prdNo}
    </select>

    <!-- 장바구니에 동일 상품 존재하지 않으면 장바구니에 추가: cartNo은 DBMS에서 자동 추가-->
    <insert id="insertCart" parameterType="com.spring.mybatis.project.model.CartVO">
        INSERT INTO cart (memId, prdNo, cartQty)
        VALUES (#{memId}, #{prdNo}, #{cartQty})
    </insert>

    <!-- 장바구니에 동일 상품 존재하면 상품 수량만 변경
         한 명의 회원이 한 개의 상품에 대한 수량을 저장할 수 있음(레코드로 구성)
         특정 회원의 특정 상품 레코드가 두 번 이상 표현될 수 없음-->
    <update id="updateQtyInCart" parameterType="com.spring.mybatis.project.model.CartVO">
        UPDATE cart
        SET cartQty=cartQty+#{cartQty}
        WHERE memId=#{memId} AND prdNo=#{prdNo}
    </update>

    <!-- 특정 회원의 cart 레코드를 반환: cartList (CartVO)
         cart 테이블의 레코드와 관련된 상품 테이블의 레코드(정보) 같이 반환되어야 함
         조인 쿼리 사용
         쿼리 결과레코드가 여러개면 resultType은 자동으로 ArrayList로 변환됨 -->
    <select id="cartList" parameterType="string" resultType="com.spring.mybatis.project.model.CartVO">
        SELECT c.cartNo, p.prdNo, p.prdImg, p.prdName, p.prdPrice, c.cartQty, c.memId
        FROM ex_product p, cart c
        WHERE p.prdNo=c.prdNo AND c.memId=#{memId}
        ORDER BY c.cartNo
    </select>

    <!-- 특정 회원이 전달한 장바구니 삭제 목록 ArrayList로 받아서 해당 목록 삭제
     ArrayList의 원소에는 cartNo가 포함되어 있음
     List 형태의 파라미터이므로 원소 각각 추출해서 delete 진행
     delete from cart where cartNo in (List 원소 1, 원소2, ...)
     mybatis foreach 사용
     -->
    <delete id="deleteCart" parameterType="List">
        DELETE FROM cart where cartNo IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <!-- 주문 진행 시 변경 수량 최종 수정 -->
    <update id="updateCart" parameterType="com.spring.mybatis.project.model.CartVO">
        UPDATE cart
        SET cartQty = #{cartQty}
        WHERE cartNo = #{cartNo}
    </update>

    <!-- 회원 정보 반환 -->
    <select id="getMemberInfo" parameterType="string" resultType="com.spring.mybatis.project.model.MemberVO">
        SELECT memId, memName, memHp, memZipcode, memAddress1, memAddress2
        FROM ex_member
        WHERE memId=#{memId}
    </select>

    <!-- 주문 완료 처리 -->
    <!-- 주문 정보(수령인) 저장 -->
    <insert id="insertOrderInfo" parameterType="com.spring.mybatis.project.model.OrderInfoVO">
        INSERT INTO order_info(ordNo, memId, ordReceiver, ordRcvZipcode,
        ordRcvAddress1, ordRcvAddress2, ordRcvPhone,
        ordRcvMsg, ordPay)
        VALUES(#{ordNo}, #{memId}, #{ordRcvReceiver}, #{ordRcvZipcode},
        #{ordRcvAddress1}, #{ordRcvAddress2}, #{ordRcvPhone},
        #{ordRcvMsg},#{ordPay})
    </insert>

    <!-- 주문상품 정보 저장: 파라미터 memId, ordNo 전달, 상품정보는 cart 테이블에서 추출 후 insert 연결 -->
    <insert id="insertOrderProduct">
        INSERT INTO order_product(ordNo, prdNo, ordQty)
        SELECT #{ordNo}, prdNo, cartQty
        FROM cart WHERE memId=#{memId}
    </insert>

    <!-- 주문 완료 후 주문 회원의 장바구니 내용 삭제: memId -->
    <delete id="deleteCartAfterOrder">
        DELETE FROM cart
        WHERE memId = #{memId}
    </delete>
</mapper>


























